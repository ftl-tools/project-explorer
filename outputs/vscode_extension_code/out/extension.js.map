{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/ProjectExplorerProvider.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\nimport { ProjectExplorerProvider } from './ProjectExplorerProvider';\n\nexport function activate(context: vscode.ExtensionContext) {\n    const provider = new ProjectExplorerProvider(context);\n\n    vscode.window.registerTreeDataProvider('projectExplorer', provider);\n\n    // Watch for theme changes to update icons\n    vscode.window.onDidChangeActiveColorTheme(() => {\n        provider.refresh();\n    });\n\n    const updateBrainstormingContext = () => {\n        const cfg = vscode.workspace.getConfiguration('project-explorer');\n        const raw = cfg.get<string>('brainstormingDocPath') || '';\n        const has = typeof raw === 'string' && raw.trim().length > 0;\n        void vscode.commands.executeCommand('setContext', 'projectExplorer.hasBrainstorming', has);\n    };\n\n    updateBrainstormingContext();\n\n    context.subscriptions.push(\n        vscode.workspace.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('project-explorer.brainstormingDocPath') || e.affectsConfiguration('project-explorer')) {\n                updateBrainstormingContext();\n            }\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('projectExplorer.openBrainstormingDoc', async () => {\n            const cfg = vscode.workspace.getConfiguration('project-explorer');\n            const pathSetting = (cfg.get<string>('brainstormingDocPath') || '').trim();\n            if (!pathSetting) {\n                vscode.window.showWarningMessage('No brainstormingDocPath is configured.');\n                return;\n            }\n\n            try {\n                let targetUri: vscode.Uri | undefined;\n                const isAbsolute = pathSetting.startsWith('/') || /^[a-zA-Z]:\\\\/.test(pathSetting) || pathSetting.startsWith('~');\n                if (isAbsolute) {\n                    // expand ~ if present\n                    const expanded = pathSetting.startsWith('~') && process.env.HOME\n                        ? pathSetting.replace('~', process.env.HOME)\n                        : pathSetting;\n                    targetUri = vscode.Uri.file(expanded);\n                } else {\n                    const ws = vscode.workspace.workspaceFolders?.[0];\n                    if (!ws) {\n                        vscode.window.showErrorMessage('No workspace is open to resolve a relative brainstormingDocPath.');\n                        return;\n                    }\n                    targetUri = vscode.Uri.joinPath(ws.uri, pathSetting);\n                }\n\n                const doc = await vscode.workspace.openTextDocument(targetUri);\n                await vscode.window.showTextDocument(doc, { preview: false });\n            } catch (err) {\n                const msg = err instanceof Error ? err.message : String(err);\n                vscode.window.showErrorMessage(`Unable to open brainstorming document: ${msg}`);\n            }\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('projectExplorer.openExternal', async (url: string) => {\n            try {\n                const uri = vscode.Uri.parse(url);\n                await vscode.env.openExternal(uri);\n            } catch (err) {\n                const msg = err instanceof Error ? err.message : String(err);\n                vscode.window.showErrorMessage(`Unable to open URL: ${msg}`);\n            }\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('projectExplorer.runScript', async (id: string) => {\n            await provider.runScriptById(id);\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('projectExplorer.openHelp', async () => {\n            const id = context.extension.id;\n            const uri = vscode.Uri.parse(`vscode:extension/${id}`);\n            await vscode.commands.executeCommand('vscode.open', uri);\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('projectExplorer.openSettings', async () => {\n            const hasWs = (vscode.workspace.workspaceFolders?.length || 0) > 0;\n            if (hasWs) {\n                await vscode.commands.executeCommand('workbench.action.openWorkspaceSettings');\n                await vscode.commands.executeCommand('workbench.action.openSettings', '@ext:ftl-tools.project-explorer');\n            } else {\n                vscode.window.showInformationMessage('Workspace settings are unavailable. Opening User settings.');\n                await vscode.commands.executeCommand('workbench.action.openSettings', '@ext:ftl-tools.project-explorer');\n            }\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('projectExplorer.configureTreeItems', async () => {\n            await vscode.commands.executeCommand('workbench.action.openSettings', 'project-explorer.treeItems');\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('projectExplorer.collapseAll', async () => {\n            await vscode.commands.executeCommand('workbench.actions.treeView.projectExplorer.collapseAll');\n        })\n    );\n}\n\n\n\nexport function deactivate() {}", "import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as https from 'https';\nimport * as http from 'http';\nimport { spawn } from 'child_process';\n\nclass FaviconCache {\n    private cacheDir: string;\n    private indexPath: string;\n    private index: Record<string, { path?: string; expiresAt?: number; negativeUntil?: number }>; // keyed by origin\n    private inflight: Map<string, Promise<vscode.Uri | undefined>> = new Map();\n\n    constructor(private context: vscode.ExtensionContext) {\n        this.cacheDir = path.join(context.globalStorageUri.fsPath, 'favicons');\n        this.indexPath = path.join(this.cacheDir, 'index.json');\n        try { fs.mkdirSync(this.cacheDir, { recursive: true }); } catch {}\n        this.index = this.readIndex();\n    }\n\n    async getIconForUrl(urlStr: string): Promise<vscode.Uri | undefined> {\n        let origin: string;\n        try {\n            const u = new URL(urlStr);\n            if (u.protocol !== 'http:' && u.protocol !== 'https:') return undefined;\n            origin = `${u.protocol}//${u.host}`;\n        } catch { return undefined; }\n\n        // de-dupe concurrent fetches per origin\n        const existing = this.inflight.get(origin);\n        if (existing) return existing;\n\n        const promise = this.resolve(origin, urlStr).finally(() => this.inflight.delete(origin));\n        this.inflight.set(origin, promise);\n        return promise;\n    }\n\n    private async resolve(origin: string, fullUrl: string): Promise<vscode.Uri | undefined> {\n        const now = Date.now();\n        const entry = this.index[origin];\n        if (entry) {\n            if (entry.expiresAt && entry.expiresAt > now && entry.path && fs.existsSync(entry.path)) {\n                return vscode.Uri.file(entry.path);\n            }\n            if (entry.negativeUntil && entry.negativeUntil > now) return undefined;\n        }\n\n        // Try /favicon.ico first\n        const icoUrl = `${origin}/favicon.ico`;\n        const icoBuf = await this.tryFetchBuffer(icoUrl, 5000).catch(() => undefined);\n        if (icoBuf) {\n            const file = this.saveIcon(origin, icoBuf, 'ico');\n            this.index[origin] = { path: file, expiresAt: now + 7 * 24 * 60 * 60 * 1000 };\n            this.writeIndex();\n            return vscode.Uri.file(file);\n        }\n\n        // Fallback: parse HTML for <link rel=\"icon\"> etc\n        const html = await this.tryFetchText(fullUrl, 5000).catch(() => undefined);\n        if (html) {\n            const href = this.findIconHref(html);\n            if (href) {\n                try {\n                    const base = new URL(fullUrl);\n                    const resolved = new URL(href, base);\n                    const buf = await this.tryFetchBuffer(resolved.toString(), 7000).catch(() => undefined);\n                    if (buf) {\n                        const ext = this.guessExtFromUrlOrMime(resolved.toString());\n                        const file = this.saveIcon(origin, buf, ext);\n                        this.index[origin] = { path: file, expiresAt: now + 7 * 24 * 60 * 60 * 1000 };\n                        this.writeIndex();\n                        return vscode.Uri.file(file);\n                    }\n                } catch {}\n            }\n        }\n\n        // Negative cache\n        this.index[origin] = { negativeUntil: now + 24 * 60 * 60 * 1000 };\n        this.writeIndex();\n        return undefined;\n    }\n\n    private readIndex(): Record<string, { path?: string; expiresAt?: number; negativeUntil?: number }> {\n        try {\n            if (fs.existsSync(this.indexPath)) {\n                const txt = fs.readFileSync(this.indexPath, 'utf8');\n                return JSON.parse(txt) || {};\n            }\n        } catch {}\n        return {};\n    }\n\n    private writeIndex(): void {\n        try { fs.writeFileSync(this.indexPath, JSON.stringify(this.index, null, 2), 'utf8'); } catch {}\n    }\n\n    private saveIcon(origin: string, buf: Buffer, ext: string): string {\n        const safe = origin.replace(/[^a-z0-9]/gi, '_');\n        const file = path.join(this.cacheDir, `${safe}.${ext}`);\n        fs.writeFileSync(file, buf);\n        return file;\n    }\n\n    private guessExtFromUrlOrMime(u: string): string {\n        const lower = u.toLowerCase();\n        if (lower.endsWith('.png')) return 'png';\n        if (lower.endsWith('.svg') || lower.includes('image/svg')) return 'svg';\n        if (lower.endsWith('.jpg') || lower.endsWith('.jpeg')) return 'jpg';\n        if (lower.endsWith('.ico')) return 'ico';\n        return 'png';\n    }\n\n    private async tryFetchText(urlStr: string, timeoutMs: number): Promise<string> {\n        const buf = await this.tryFetchBuffer(urlStr, timeoutMs);\n        return buf.toString('utf8');\n    }\n\n    private async tryFetchBuffer(urlStr: string, timeoutMs: number): Promise<Buffer> {\n        return new Promise<Buffer>((resolve, reject) => {\n            let timedOut = false;\n            const to = setTimeout(() => { timedOut = true; req?.destroy(new Error('timeout')); reject(new Error('timeout')); }, timeoutMs);\n            const u = new URL(urlStr);\n            const lib = u.protocol === 'https:' ? https : http;\n            const req = lib.get(urlStr, res => {\n                const status = res.statusCode || 0;\n                // Handle redirects\n                if ([301, 302, 303, 307, 308].includes(status) && res.headers.location) {\n                    clearTimeout(to);\n                    this.tryFetchBuffer(new URL(res.headers.location, urlStr).toString(), timeoutMs).then(resolve, reject);\n                    res.resume();\n                    return;\n                }\n                if (status < 200 || status >= 300) {\n                    clearTimeout(to);\n                    reject(new Error(`HTTP ${status}`));\n                    res.resume();\n                    return;\n                }\n                const chunks: Buffer[] = [];\n                res.on('data', d => chunks.push(Buffer.isBuffer(d) ? d : Buffer.from(d)));\n                res.on('end', () => { if (!timedOut) { clearTimeout(to); resolve(Buffer.concat(chunks)); } });\n                res.on('error', err => { if (!timedOut) { clearTimeout(to); reject(err); } });\n            });\n            req.on('error', err => { if (!timedOut) { clearTimeout(to); reject(err); } });\n        });\n    }\n\n    private findIconHref(html: string): string | undefined {\n        // Very small heuristic: look for rel containing 'icon' and grab href\n        const re = /<link\\s+[^>]*rel=[\"']([^\"']*)[\"'][^>]*href=[\"']([^\"']+)[\"'][^>]*>/gi;\n        let m: RegExpExecArray | null;\n        const candidates: string[] = [];\n        while ((m = re.exec(html))) {\n            const rel = m[1].toLowerCase();\n            const href = m[2];\n            if (rel.includes('icon')) candidates.push(href);\n        }\n        return candidates[0];\n    }\n}\n\nexport class ProjectExplorerProvider implements vscode.TreeDataProvider<ProjectExplorerItem> {\n    private _onDidChangeTreeData = new vscode.EventEmitter<ProjectExplorerItem | undefined | null | void>();\n    readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\n\n    private items: Map<string, ProjectExplorerItem> = new Map();\n    private parentById: Map<string, string | undefined> = new Map();\n    private childrenById: Map<string, string[]> = new Map();\n    private roots: string[] = [];\n\n    private favicons: FaviconCache;\n\n    private running: Set<string> = new Set();\n    private scriptIds: Set<string> = new Set();\n\n    constructor(context: vscode.ExtensionContext) {\n        this.favicons = new FaviconCache(context);\n        vscode.workspace.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('project-explorer.treeItems') || e.affectsConfiguration('project-explorer')) {\n                this.refresh();\n            }\n        });\n    }\n\n    refresh(): void {\n        this.rebuild();\n        this._onDidChangeTreeData.fire();\n    }\n\n    getTreeItem(element: ProjectExplorerItem): vscode.TreeItem {\n        return element;\n    }\n\n    async getChildren(element?: ProjectExplorerItem): Promise<ProjectExplorerItem[]> {\n        if (this.items.size === 0 && this.roots.length === 0) this.rebuild();\n        if (!element) return this.roots.map(id => this.items.get(id)!).filter(Boolean);\n        const ids = this.childrenById.get(element.id || '') || [];\n        return ids.map(id => this.items.get(id)!).filter(Boolean);\n    }\n\n    private rebuild() {\n        const warnings = new Set<string>();\n        const cfg = vscode.workspace.getConfiguration('project-explorer');\n        const raw = cfg.get<unknown>('treeItems');\n\n        this.items.clear();\n        this.parentById.clear();\n        this.childrenById.clear();\n        this.roots = [];\n        this.scriptIds.clear();\n\n        const arr = Array.isArray(raw) ? raw : [];\n        if (!Array.isArray(raw)) warnings.add('`project-explorer.treeItems` is not an array. Ignoring.');\n\n        type UserItem = {\n            id?: unknown;\n            typeAndPath?: unknown; // new name\n            type_plus_path?: unknown; // deprecated, supported for backward compatibility\n            icon?: unknown;\n            label?: unknown;\n            parentId?: unknown;\n            cwd?: unknown;\n            env?: unknown;\n        };\n\n        type ValidItem = { id: string; type?: 'file' | 'folder' | 'url' | 'script'; target?: string; icon?: string; label: string; parentId?: string; cwd?: string; env?: Record<string, string> };\n        const valid: Array<ValidItem> = [];\n\n        for (const entry of arr as UserItem[]) {\n            if (!entry || typeof entry !== 'object') {\n                warnings.add('Ignored non-object entry in `project-explorer.treeItems`.');\n                continue;\n            }\n            const id = typeof entry.id === 'string' && entry.id.trim() ? entry.id.trim() : '';\n            if (!id) {\n                warnings.add('Ignored item with missing `id`.');\n                continue;\n            }\n            if (this.items.has(id) || valid.find(v => v.id === id)) {\n                warnings.add(`Duplicate id '${id}' found. Only the first occurrence will be used.`);\n                continue;\n            }\n\n            const parentId = typeof entry.parentId === 'string' && entry.parentId.trim() ? entry.parentId.trim() : undefined;\n            const labelRaw = typeof entry.label === 'string' && entry.label.trim() ? entry.label.trim() : undefined;\n            const icon = typeof entry.icon === 'string' && entry.icon.trim() ? entry.icon.trim() : undefined;\n\n            let type: 'file' | 'folder' | 'url' | 'script' | undefined;\n            let target: string | undefined;\n\n            const newRaw = (entry as any).typeAndPath;\n            const oldRaw = (entry as any).type_plus_path;\n            const tpp = typeof newRaw === 'string' && newRaw.trim() ? newRaw.trim() : (typeof oldRaw === 'string' && oldRaw.trim() ? oldRaw.trim() : '');\n            if (!tpp && typeof oldRaw === 'string' && oldRaw.trim()) {\n                warnings.add(`Item '${id}' uses deprecated 'type_plus_path'. Please rename to 'typeAndPath'.`);\n            }\n            if (tpp) {\n                const colon = tpp.indexOf(':');\n                if (colon > 0 && colon < tpp.length - 1) {\n                    const t = tpp.slice(0, colon) as 'file' | 'folder' | 'url' | 'script';\n                    const tgt = tpp.slice(colon + 1);\n                    if (['file', 'folder', 'url', 'script'].includes(t)) {\n                        type = t;\n                        target = tgt;\n                    } else {\n                        warnings.add(`Item '${id}' has unknown type '${t}'. Treating as label-only item.`);\n                    }\n                } else {\n                    warnings.add(`Item '${id}' has invalid typeAndPath '${tpp}'. Treating as label-only item.`);\n                }\n            }\n\n            // Determine label fallback behavior\n            let label = labelRaw;\n            if (!label) {\n                if (type && target) {\n                    if (type === 'url') {\n                        try {\n                            const u = new URL(target);\n                            const segs = u.pathname.split('/').filter(Boolean);\n                            label = segs.length > 0 ? decodeURIComponent(segs[segs.length - 1]) : u.hostname;\n                        } catch {\n                            label = target;\n                        }\n                    } else if (type === 'file' || type === 'folder') {\n                        label = path.basename(this.resolveFsPath(target));\n                    } else if (type === 'script') {\n                        label = target;\n                    }\n                } else {\n                    // No type/target and no label provided; fall back to id\n                    label = id;\n                }\n            }\n\n            const v: ValidItem = { id, type, target, label: label!, icon, parentId };\n            if (type === 'script') {\n                const cwd = typeof (entry as any).cwd === 'string' && (entry as any).cwd.trim() ? (entry as any).cwd.trim() : undefined;\n                const envRaw = (entry as any).env;\n                let env: Record<string, string> | undefined;\n                if (envRaw && typeof envRaw === 'object' && !Array.isArray(envRaw)) {\n                    env = {};\n                    for (const [k, val] of Object.entries(envRaw as Record<string, unknown>)) {\n                        if (typeof val === 'string') env[k] = val;\n                    }\n                }\n                v.cwd = cwd;\n                v.env = env;\n                this.scriptIds.add(id);\n            }\n\n            valid.push(v);\n        }\n\n        // Build nodes\n        for (const v of valid) {\n            const node = this.makeNode(v);\n            this.items.set(v.id, node);\n            this.parentById.set(v.id, v.parentId);\n        }\n\n        // Enforce: children cannot have script parent\n        for (const [id, pid] of Array.from(this.parentById.entries())) {\n            if (pid && this.scriptIds.has(pid)) {\n                warnings.add(`Item '${id}' cannot have script parent '${pid}'. Rendering as top-level.`);\n                this.parentById.set(id, undefined);\n            }\n        }\n\n        // Detect cycles\n        const visited = new Set<string>();\n        const stack = new Set<string>();\n        const cyc = new Set<string>();\n        const dfs = (id: string) => {\n            if (stack.has(id)) {\n                cyc.add(id);\n                return;\n            }\n            if (visited.has(id)) return;\n            visited.add(id);\n            stack.add(id);\n            const p = this.parentById.get(id);\n            if (p && this.items.has(p)) dfs(p);\n            stack.delete(id);\n        };\n        for (const id of this.items.keys()) dfs(id);\n        if (cyc.size > 0) warnings.add('Detected cyclical parent relationships. Items in cycles will be rendered at top level.');\n        for (const id of cyc) this.parentById.delete(id);\n\n        // Build children and roots\n        for (const id of this.items.keys()) this.childrenById.set(id, []);\n        for (const [id, pid] of this.parentById) {\n            if (pid && this.items.has(pid)) this.childrenById.get(pid)!.push(id);\n        }\n        // Any with no valid parent are roots\n        for (const id of this.items.keys()) {\n            const pid = this.parentById.get(id);\n            if (!pid || !this.items.has(pid)) {\n                if (pid && !this.items.has(pid)) warnings.add(`Parent '${pid}' not found for item '${id}'. Rendering as top-level.`);\n                this.roots.push(id);\n            }\n        }\n\n        // Set collapsible state based on children\n        for (const [id, node] of this.items) {\n            const hasChildren = (this.childrenById.get(id) || []).length > 0;\n            node.collapsibleState = hasChildren ? vscode.TreeItemCollapsibleState.Collapsed : vscode.TreeItemCollapsibleState.None;\n            // For label-only items without explicit icon, use folder icon to hint grouping\n            if (!node.command && !node.iconPath && !('script' in node)) {\n                node.iconPath = new vscode.ThemeIcon('folder');\n            }\n        }\n\n        // Surface warnings (non-blocking)\n        if (warnings.size > 0) {\n            vscode.window.showWarningMessage(Array.from(warnings).join(' '));\n        }\n    }\n\n    private makeNode(v: { id: string; type?: 'file' | 'folder' | 'url' | 'script'; target?: string; icon?: string; label: string; parentId?: string; cwd?: string; env?: Record<string, string>; }): ProjectExplorerItem {\n        const { id } = v;\n        const type = v.type;\n        const target = v.target;\n        let label = v.label;\n        let iconPath: vscode.ThemeIcon | vscode.Uri | undefined;\n        const tooltip = new vscode.MarkdownString();\n        if (type && target) tooltip.appendText(`${type}:${target}`); else tooltip.appendText(label);\n        tooltip.isTrusted = true;\n\n        // icon resolution\n        if (v.icon) {\n            const codicon = this.parseCodicon(v.icon);\n            if (codicon) iconPath = new vscode.ThemeIcon(codicon);\n            else {\n                const p = this.resolveFsPath(v.icon);\n                if (fs.existsSync(p)) iconPath = vscode.Uri.file(p);\n                else vscode.window.showWarningMessage(`Icon path not found for item '${id}': ${v.icon}. Falling back to default icon.`);\n            }\n        } else if (type === 'url') {\n            iconPath = new vscode.ThemeIcon('globe');\n        } else if (type === 'script') {\n            iconPath = new vscode.ThemeIcon('run');\n        }\n\n        const node = new ProjectExplorerItem(label, vscode.TreeItemCollapsibleState.None) as ProjectExplorerItem & { script?: { cmd: string; cwd?: string; env?: Record<string, string> } };\n        node.id = id;\n        node.tooltip = tooltip;\n        node.iconPath = iconPath;\n\n        // command behavior\n        if (type === 'file' && target) {\n            const uri = vscode.Uri.file(this.resolveFsPath(target));\n            node.command = { command: 'vscode.open', title: 'Open File', arguments: [uri] };\n        } else if (type === 'folder' && target) {\n            const uri = vscode.Uri.file(this.resolveFsPath(target));\n            node.command = { command: 'revealInExplorer', title: 'Reveal in Explorer', arguments: [uri] } as any;\n        } else if (type === 'url' && target) {\n            node.command = { command: 'projectExplorer.openExternal', title: 'Open in Browser', arguments: [target] };\n            // Attempt async favicon resolution when user hasn't set a custom icon\n            if (!v.icon) {\n                this.favicons.getIconForUrl(target).then(uri => {\n                    if (uri) {\n                        const n = this.items.get(id);\n                        if (n) {\n                            n.iconPath = uri;\n                            this._onDidChangeTreeData.fire(n);\n                        }\n                    }\n                }).catch(() => {/*ignore*/});\n            }\n        } else if (type === 'script' && target) {\n            node.script = { cmd: target, cwd: v.cwd, env: v.env };\n            node.command = { command: 'projectExplorer.runScript', title: 'Run Script', arguments: [id] };\n        }\n\n        return node;\n    }\n\n    async runScriptById(id: string): Promise<void> {\n        const node = this.items.get(id) as (ProjectExplorerItem & { script?: { cmd: string; cwd?: string; env?: Record<string, string> } }) | undefined;\n        if (!node || !node.script) return;\n        if (this.running.has(id)) return; // already running\n\n        const originalLabel = node.label as string;\n        this.running.add(id);\n        node.command = undefined; // disable while running\n        node.label = `${originalLabel}...`;\n        this._onDidChangeTreeData.fire(node);\n\n        const cwd = node.script.cwd ? this.resolveFsPath(node.script.cwd) : undefined;\n        if (cwd && !fs.existsSync(cwd)) {\n            vscode.window.showErrorMessage(`Invalid cwd for script '${id}': ${cwd}`);\n            // restore state\n            this.running.delete(id);\n            node.label = originalLabel;\n            node.command = { command: 'projectExplorer.runScript', title: 'Run Script', arguments: [id] };\n            this._onDidChangeTreeData.fire(node);\n            return;\n        }\n\n        const env = { ...process.env, ...(node.script.env || {}) } as NodeJS.ProcessEnv;\n        const child = spawn(node.script.cmd, { shell: true, cwd, env });\n        child.on('error', err => {\n            vscode.window.showErrorMessage(`Failed to start script '${id}': ${err instanceof Error ? err.message : String(err)}`);\n        });\n        const done = () => {\n            this.running.delete(id);\n            node.label = originalLabel;\n            node.command = { command: 'projectExplorer.runScript', title: 'Run Script', arguments: [id] };\n            this._onDidChangeTreeData.fire(node);\n        };\n        child.on('exit', () => done());\n        child.on('close', () => done());\n    }\n\n    private parseCodicon(s: string): string | null {\n        const m = /^\\$\\(([^)]+)\\)$/.exec(s.trim());\n        return m ? m[1] : null;\n    }\n\n    private resolveFsPath(p: string): string {\n        let s = p.trim();\n        if (s.startsWith('~') && process.env.HOME) s = s.replace('~', process.env.HOME);\n        if (path.isAbsolute(s)) return s;\n        const ws = vscode.workspace.workspaceFolders?.[0];\n        if (ws) return path.join(ws.uri.fsPath, s);\n        return s; // fall back\n    }\n}\n\nexport class ProjectExplorerItem extends vscode.TreeItem {\n    constructor(label: string, collapsibleState: vscode.TreeItemCollapsibleState) {\n        super(label, collapsibleState);\n    }\n}\n"],
  "mappings": "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",
  "names": ["extension_exports", "__export", "activate", "deactivate", "__toCommonJS", "vscode", "vscode", "path", "fs", "https", "http", "import_child_process", "FaviconCache", "context", "urlStr", "origin", "u", "existing", "promise", "fullUrl", "now", "entry", "icoUrl", "icoBuf", "file", "html", "href", "base", "resolved", "buf", "ext", "txt", "safe", "lower", "timeoutMs", "resolve", "reject", "timedOut", "to", "req", "res", "status", "chunks", "d", "err", "re", "m", "candidates", "rel", "ProjectExplorerProvider", "e", "element", "id", "warnings", "raw", "arr", "valid", "v", "parentId", "labelRaw", "icon", "type", "target", "newRaw", "oldRaw", "tpp", "colon", "t", "tgt", "label", "segs", "cwd", "envRaw", "env", "k", "val", "node", "pid", "visited", "stack", "cyc", "dfs", "p", "hasChildren", "iconPath", "tooltip", "codicon", "ProjectExplorerItem", "uri", "n", "originalLabel", "child", "done", "s", "_a", "ws", "collapsibleState", "activate", "context", "provider", "ProjectExplorerProvider", "updateBrainstormingContext", "raw", "has", "e", "_a", "pathSetting", "targetUri", "expanded", "ws", "doc", "err", "msg", "url", "uri", "id", "deactivate"]
}
