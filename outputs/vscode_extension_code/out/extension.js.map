{
  "version": 3,
  "sources": ["../src/utils/settingsUtil.ts", "../src/extension.ts", "../src/ProjectExplorerProvider.ts", "../src/parser.ts", "../src/builder.ts", "../src/utils/nameCasing.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\n\nexport type Scope = 'workspace' | 'user';\n\ntype Defaults = Record<string, unknown>;\n\nconst defaults: Defaults = {\n  'ftl-tools.project-explorer.watchThese': [],\n  'ftl-tools.project-explorer.userDefinedTreeItems': [],\n  'ftl-tools.project-explorer.openDocsInPreview': true,\n  'ftl-tools.project-explorer.brainstormingDocPath': '',\n};\n\nconst scopeFor = (scope?: Scope): vscode.ConfigurationTarget => {\n  if (scope === 'user') return vscode.ConfigurationTarget.Global;\n  if (scope === 'workspace') return vscode.ConfigurationTarget.Workspace;\n  const hasWs = (vscode.workspace.workspaceFolders?.length || 0) > 0;\n  return hasWs\n    ? vscode.ConfigurationTarget.Workspace\n    : vscode.ConfigurationTarget.Global;\n};\n\nexport const get = <T>(key: string, _scope?: Scope): T | undefined => {\n  const parts = key.split('.');\n  const section = parts.shift() || '';\n  const cfg = vscode.workspace.getConfiguration(section);\n  const k = parts.join('.');\n  return cfg.get<T>(k);\n};\n\nexport const update = async <T>(key: string, value: T, scope?: Scope): Promise<void> => {\n  const parts = key.split('.');\n  const section = parts.shift() || '';\n  const cfg = vscode.workspace.getConfiguration(section);\n  const k = parts.join('.');\n  await cfg.update(k, value, scopeFor(scope));\n};\n\nexport const watch = <T>(keys: string[] | RegExp, handler: (k: string, v: T | undefined) => void, _scope?: Scope): vscode.Disposable => {\n  const asArray = Array.isArray(keys) ? keys : null;\n  const rex = asArray ? null : (keys as RegExp);\n\n  const invokeNow = () => {\n    const all: string[] = asArray || [];\n    if (!asArray && rex) {\n      // scan known defaults and current config for matches\n      const candidates = new Set<string>([...Object.keys(defaults)]);\n      const cfgAll = [\n        'project-explorer.watchThese',\n        'project-explorer.userDefinedTreeItems',\n        'project-explorer.treeItems',\n        'project-explorer.openDocsInPreview',\n        'project-explorer.brainstormingDocPath',\n      ];\n      for (const c of cfgAll) candidates.add(`ftl-tools.${c}`);\n      for (const k of candidates) if (rex.test(k)) handler(k, get<T>(k));\n      return;\n    }\n    for (const k of all) handler(k, get<T>(k));\n  };\n\n  invokeNow();\n\n  const sub = vscode.workspace.onDidChangeConfiguration(e => {\n    const test = (fullKey: string) => {\n      const parts = fullKey.split('.');\n      const section = parts.shift() || '';\n      const k = parts.join('.');\n      return e.affectsConfiguration(`${section}.${k}`) || e.affectsConfiguration(section);\n    };\n    if (asArray) {\n      for (const k of asArray) if (test(k)) handler(k, get<T>(k));\n      return;\n    }\n    if (rex) {\n      // on any change, re-evaluate candidates and emit those matching regex\n      const candidates = new Set<string>([...Object.keys(defaults)]);\n      const cfgAll = [\n        'project-explorer.watchThese',\n        'project-explorer.userDefinedTreeItems',\n        'project-explorer.treeItems',\n        'project-explorer.openDocsInPreview',\n        'project-explorer.brainstormingDocPath',\n      ];\n      for (const c of cfgAll) candidates.add(`ftl-tools.${c}`);\n      for (const k of candidates) if (rex.test(k) && test(k)) handler(k, get<T>(k));\n    }\n  });\n\n  return { dispose() { sub.dispose(); } };\n};\n\nconst settingsUri = async (): Promise<vscode.Uri> => {\n  const ws = vscode.workspace.workspaceFolders?.[0];\n  if (ws) return vscode.Uri.joinPath(ws.uri, '.vscode', 'settings.json');\n  // fallback to user settings.json\n  // Use VS Code API to get user settings location is not provided; approximate common path\n  // Open untitled if not known; but we will create a JSON file in workspace or show user settings via command when needed\n  const home = process.env.HOME || process.env.USERPROFILE || '';\n  return vscode.Uri.file(home ? `${home}/Library/Application Support/Code/User/settings.json` : '');\n};\n\nexport const format = async (): Promise<{ openedUri: vscode.Uri; firstKey: string | null }> => {\n  const uri = await settingsUri();\n  let json: Record<string, unknown> = {};\n  let exists = true;\n  try {\n    const buf = await vscode.workspace.fs.readFile(uri);\n    const txt = Buffer.from(buf).toString('utf8').trim();\n    json = txt ? JSON.parse(txt) : {};\n  } catch {\n    exists = false;\n  }\n\n  if (!exists) json = {};\n\n  // collect ftl-tools.* keys, inject defaults for known ones\n  const allKeys = new Set<string>(Object.keys(json));\n  for (const k of Object.keys(defaults)) if (!allKeys.has(k)) json[k] = defaults[k];\n\n  // Grouping: ensure ftl-tools.* keys are together by reconstructing object with grouped keys first among their first occurrence\n  const ftlKeys = Object.keys(json).filter(k => k.startsWith('ftl-tools.')).sort();\n  const nonFtl = Object.keys(json).filter(k => !k.startsWith('ftl-tools.'));\n  const ordered: Record<string, unknown> = {};\n  for (const k of ftlKeys) ordered[k] = json[k];\n  for (const k of nonFtl) ordered[k] = json[k];\n\n  const content = JSON.stringify(ordered, null, 2);\n  await vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(uri, '..'));\n  await vscode.workspace.fs.writeFile(uri, Buffer.from(content, 'utf8'));\n\n  const firstKey = ftlKeys[0] || null;\n  return { openedUri: uri, firstKey };\n};\n", "import * as vscode from \"vscode\";\nimport { ProjectExplorerProvider } from \"./ProjectExplorerProvider\";\n\nimport { activateParser } from \"./parser\";\nimport { activateBuilder } from \"./builder\";\n\nexport async function activate(context: vscode.ExtensionContext) {\n  const provider = new ProjectExplorerProvider(context);\n\n  // Ensure workspace .vscode/project_explorer exists and start parser/builder\n  const ws = vscode.workspace.workspaceFolders?.[0];\n  if (ws) {\n    const dir = vscode.Uri.joinPath(ws.uri, \".vscode\", \"project_explorer\");\n    await vscode.workspace.fs.createDirectory(dir);\n  }\n  const parser = activateParser(context);\n  const builder = activateBuilder(context);\n\n  vscode.window.registerTreeDataProvider(\"projectExplorer\", provider);\n\n  // Watch for theme changes to update icons immediately\n  const themeSub = vscode.window.onDidChangeActiveColorTheme(() => {\n    provider.retheme();\n  });\n  context.subscriptions.push(themeSub);\n\n  const updateBrainstormingContext = () => {\n    const cfg = vscode.workspace.getConfiguration(\"project-explorer\");\n    const raw = cfg.get<string>(\"brainstormingDocPath\") || \"\";\n    const has = typeof raw === \"string\" && raw.trim().length > 0;\n    void vscode.commands.executeCommand(\n      \"setContext\",\n      \"projectExplorer.hasBrainstorming\",\n      has,\n    );\n  };\n\n  updateBrainstormingContext();\n\n  context.subscriptions.push(\n    vscode.workspace.onDidChangeConfiguration((e) => {\n      if (\n        e.affectsConfiguration(\"project-explorer.brainstormingDocPath\") ||\n        e.affectsConfiguration(\"project-explorer\")\n      ) {\n        updateBrainstormingContext();\n      }\n    }),\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"projectExplorer.openBrainstormingDoc\",\n      async () => {\n        const cfg = vscode.workspace.getConfiguration(\"project-explorer\");\n        const pathSetting = (\n          cfg.get<string>(\"brainstormingDocPath\") || \"\"\n        ).trim();\n        if (!pathSetting) {\n          vscode.window.showWarningMessage(\n            \"No brainstormingDocPath is configured.\",\n          );\n          return;\n        }\n\n        try {\n          let targetUri: vscode.Uri | undefined;\n          const isAbsolute =\n            pathSetting.startsWith(\"/\") ||\n            /^[a-zA-Z]:\\\\/.test(pathSetting) ||\n            pathSetting.startsWith(\"~\");\n          if (isAbsolute) {\n            // expand ~ if present\n            const expanded =\n              pathSetting.startsWith(\"~\") && process.env.HOME\n                ? pathSetting.replace(\"~\", process.env.HOME)\n                : pathSetting;\n            targetUri = vscode.Uri.file(expanded);\n          } else {\n            const ws = vscode.workspace.workspaceFolders?.[0];\n            if (!ws) {\n              vscode.window.showErrorMessage(\n                \"No workspace is open to resolve a relative brainstormingDocPath.\",\n              );\n              return;\n            }\n            targetUri = vscode.Uri.joinPath(ws.uri, pathSetting);\n          }\n\n          const doc = await vscode.workspace.openTextDocument(targetUri);\n          await vscode.window.showTextDocument(doc, { preview: false });\n        } catch (err) {\n          const msg = err instanceof Error ? err.message : String(err);\n          vscode.window.showErrorMessage(\n            `Unable to open brainstorming document: ${msg}`,\n          );\n        }\n      },\n    ),\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"projectExplorer.openExternal\",\n      async (url: string) => {\n        try {\n          const uri = vscode.Uri.parse(url);\n          await vscode.env.openExternal(uri);\n        } catch (err) {\n          const msg = err instanceof Error ? err.message : String(err);\n          vscode.window.showErrorMessage(`Unable to open URL: ${msg}`);\n        }\n      },\n    ),\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"projectExplorer.runScript\",\n      async (id: string) => {\n        await provider.runScriptById(id);\n      },\n    ),\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"projectExplorer.showInExplorer\",\n      async (item: any) => {\n        try {\n          if (\n            item &&\n            item.command &&\n            item.command.arguments &&\n            item.command.arguments[0]\n          ) {\n            const uri = item.command.arguments[0];\n\n            // Use the workbench command to reveal files/folders in Explorer without opening them\n            await vscode.commands.executeCommand(\"revealInExplorer\", uri);\n          } else {\n            vscode.window.showErrorMessage(\n              \"No valid item found to reveal in Explorer\",\n            );\n          }\n        } catch (error) {\n          const msg = error instanceof Error ? error.message : String(error);\n          vscode.window.showErrorMessage(`Failed to show in Explorer: ${msg}`);\n        }\n      },\n    ),\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"projectExplorer.openInBrowser\",\n      async (item: any) => {\n        if (\n          item &&\n          item.command &&\n          item.command.command === \"projectExplorer.openExternal\"\n        ) {\n          const url = item.command.arguments[0];\n          await vscode.commands.executeCommand(\n            \"projectExplorer.openExternal\",\n            url,\n          );\n        }\n      },\n    ),\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"projectExplorer.openDocInPreview\",\n      async (item: any) => {\n        try {\n          if (\n            item &&\n            item.command &&\n            item.command.arguments &&\n            item.command.arguments[0]\n          ) {\n            const uri = item.command.arguments[0];\n            await vscode.commands.executeCommand(\"markdown.showPreview\", uri);\n          }\n        } catch (error) {\n          const msg = error instanceof Error ? error.message : String(error);\n          vscode.window.showErrorMessage(`Failed to open in preview: ${msg}`);\n        }\n      },\n    ),\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"projectExplorer.openDocInEditor\",\n      async (item: any) => {\n        try {\n          if (\n            item &&\n            item.command &&\n            item.command.arguments &&\n            item.command.arguments[0]\n          ) {\n            const uri = item.command.arguments[0];\n            await vscode.commands.executeCommand(\"vscode.open\", uri);\n          }\n        } catch (error) {\n          const msg = error instanceof Error ? error.message : String(error);\n          vscode.window.showErrorMessage(`Failed to open in editor: ${msg}`);\n        }\n      },\n    ),\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"projectExplorer.openHelp\", async () => {\n      const id = context.extension.id;\n      const uri = vscode.Uri.parse(`vscode:extension/${id}`);\n      await vscode.commands.executeCommand(\"vscode.open\", uri);\n    }),\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"projectExplorer.openSettings\",\n      async () => {\n        const settings = await import(\"./utils/settingsUtil\");\n        const { openedUri, firstKey } = await settings.format();\n        const doc = await vscode.workspace.openTextDocument(openedUri);\n        const editor = await vscode.window.showTextDocument(doc, { preview: false });\n        if (firstKey) {\n          const text = doc.getText();\n          const idx = text.indexOf(`\"${firstKey}\"`);\n          if (idx >= 0) {\n            const pos = doc.positionAt(idx + 1);\n            editor.revealRange(new vscode.Range(pos, pos), vscode.TextEditorRevealType.InCenter);\n            editor.selection = new vscode.Selection(pos, pos);\n          }\n        }\n      },\n    ),\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"projectExplorer.configureTreeItems\",\n      async () => {\n        await vscode.commands.executeCommand(\n          \"workbench.action.openSettings\",\n          \"project-explorer.treeItems\",\n        );\n      },\n    ),\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"projectExplorer.collapseAll\", async () => {\n      await vscode.commands.executeCommand(\n        \"workbench.actions.treeView.projectExplorer.collapseAll\",\n      );\n    }),\n  );\n}\n\nexport function deactivate() {}\n", "import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as https from 'https';\nimport * as http from 'http';\nimport { spawn } from 'child_process';\n\nclass FaviconCache {\n    private cacheDir: string;\n    private indexPath: string;\n    private index: Record<string, { path?: string; expiresAt?: number; negativeUntil?: number }>; // keyed by origin\n    private inflight: Map<string, Promise<vscode.Uri | undefined>> = new Map();\n\n    constructor(private context: vscode.ExtensionContext) {\n        this.cacheDir = path.join(context.globalStorageUri.fsPath, 'favicons');\n        this.indexPath = path.join(this.cacheDir, 'index.json');\n        try { fs.mkdirSync(this.cacheDir, { recursive: true }); } catch {}\n        this.index = this.readIndex();\n    }\n\n    async getIconForUrl(urlStr: string): Promise<vscode.Uri | undefined> {\n        let origin: string;\n        try {\n            const u = new URL(urlStr);\n            if (u.protocol !== 'http:' && u.protocol !== 'https:') return undefined;\n            origin = `${u.protocol}//${u.host}`;\n        } catch { return undefined; }\n\n        // de-dupe concurrent fetches per origin\n        const existing = this.inflight.get(origin);\n        if (existing) return existing;\n\n        const promise = this.resolve(origin, urlStr).finally(() => this.inflight.delete(origin));\n        this.inflight.set(origin, promise);\n        return promise;\n    }\n\n    private async resolve(origin: string, fullUrl: string): Promise<vscode.Uri | undefined> {\n        const now = Date.now();\n        const entry = this.index[origin];\n        if (entry) {\n            if (entry.expiresAt && entry.expiresAt > now && entry.path && fs.existsSync(entry.path)) {\n                return vscode.Uri.file(entry.path);\n            }\n            if (entry.negativeUntil && entry.negativeUntil > now) return undefined;\n        }\n\n        // Try /favicon.ico first\n        const icoUrl = `${origin}/favicon.ico`;\n        const icoBuf = await this.tryFetchBuffer(icoUrl, 5000).catch(() => undefined);\n        if (icoBuf) {\n            const file = this.saveIcon(origin, icoBuf, 'ico');\n            this.index[origin] = { path: file, expiresAt: now + 7 * 24 * 60 * 60 * 1000 };\n            this.writeIndex();\n            return vscode.Uri.file(file);\n        }\n\n        // Fallback: parse HTML for <link rel=\"icon\"> etc\n        const html = await this.tryFetchText(fullUrl, 5000).catch(() => undefined);\n        if (html) {\n            const href = this.findIconHref(html);\n            if (href) {\n                try {\n                    const base = new URL(fullUrl);\n                    const resolved = new URL(href, base);\n                    const buf = await this.tryFetchBuffer(resolved.toString(), 7000).catch(() => undefined);\n                    if (buf) {\n                        const ext = this.guessExtFromUrlOrMime(resolved.toString());\n                        const file = this.saveIcon(origin, buf, ext);\n                        this.index[origin] = { path: file, expiresAt: now + 7 * 24 * 60 * 60 * 1000 };\n                        this.writeIndex();\n                        return vscode.Uri.file(file);\n                    }\n                } catch {}\n            }\n        }\n\n        // Negative cache\n        this.index[origin] = { negativeUntil: now + 24 * 60 * 60 * 1000 };\n        this.writeIndex();\n        return undefined;\n    }\n\n    private readIndex(): Record<string, { path?: string; expiresAt?: number; negativeUntil?: number }> {\n        try {\n            if (fs.existsSync(this.indexPath)) {\n                const txt = fs.readFileSync(this.indexPath, 'utf8');\n                return JSON.parse(txt) || {};\n            }\n        } catch {}\n        return {};\n    }\n\n    private writeIndex(): void {\n        try { fs.writeFileSync(this.indexPath, JSON.stringify(this.index, null, 2), 'utf8'); } catch {}\n    }\n\n    private saveIcon(origin: string, buf: Buffer, ext: string): string {\n        const safe = origin.replace(/[^a-z0-9]/gi, '_');\n        const file = path.join(this.cacheDir, `${safe}.${ext}`);\n        fs.writeFileSync(file, buf);\n        return file;\n    }\n\n    private guessExtFromUrlOrMime(u: string): string {\n        const lower = u.toLowerCase();\n        if (lower.endsWith('.png')) return 'png';\n        if (lower.endsWith('.svg') || lower.includes('image/svg')) return 'svg';\n        if (lower.endsWith('.jpg') || lower.endsWith('.jpeg')) return 'jpg';\n        if (lower.endsWith('.ico')) return 'ico';\n        return 'png';\n    }\n\n    private async tryFetchText(urlStr: string, timeoutMs: number): Promise<string> {\n        const buf = await this.tryFetchBuffer(urlStr, timeoutMs);\n        return buf.toString('utf8');\n    }\n\n    private async tryFetchBuffer(urlStr: string, timeoutMs: number): Promise<Buffer> {\n        return new Promise<Buffer>((resolve, reject) => {\n            let timedOut = false;\n            const to = setTimeout(() => { timedOut = true; req?.destroy(new Error('timeout')); reject(new Error('timeout')); }, timeoutMs);\n            const u = new URL(urlStr);\n            const lib = u.protocol === 'https:' ? https : http;\n            const req = lib.get(urlStr, res => {\n                const status = res.statusCode || 0;\n                // Handle redirects\n                if ([301, 302, 303, 307, 308].includes(status) && res.headers.location) {\n                    clearTimeout(to);\n                    this.tryFetchBuffer(new URL(res.headers.location, urlStr).toString(), timeoutMs).then(resolve, reject);\n                    res.resume();\n                    return;\n                }\n                if (status < 200 || status >= 300) {\n                    clearTimeout(to);\n                    reject(new Error(`HTTP ${status}`));\n                    res.resume();\n                    return;\n                }\n                const chunks: Buffer[] = [];\n                res.on('data', d => chunks.push(Buffer.isBuffer(d) ? d : Buffer.from(d)));\n                res.on('end', () => { if (!timedOut) { clearTimeout(to); resolve(Buffer.concat(chunks)); } });\n                res.on('error', err => { if (!timedOut) { clearTimeout(to); reject(err); } });\n            });\n            req.on('error', err => { if (!timedOut) { clearTimeout(to); reject(err); } });\n        });\n    }\n\n    private findIconHref(html: string): string | undefined {\n        // Very small heuristic: look for rel containing 'icon' and grab href\n        const re = /<link\\s+[^>]*rel=[\"']([^\"']*)[\"'][^>]*href=[\"']([^\"']+)[\"'][^>]*>/gi;\n        let m: RegExpExecArray | null;\n        const candidates: string[] = [];\n        while ((m = re.exec(html))) {\n            const rel = m[1].toLowerCase();\n            const href = m[2];\n            if (rel.includes('icon')) candidates.push(href);\n        }\n        return candidates[0];\n    }\n}\n\nexport class ProjectExplorerProvider implements vscode.TreeDataProvider<ProjectExplorerItem> {\n    private _onDidChangeTreeData = new vscode.EventEmitter<ProjectExplorerItem | undefined | null | void>();\n    readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\n\n    private items: Map<string, ProjectExplorerItem> = new Map();\n    private treeFileUri: vscode.Uri | null = null;\n    private watcher: vscode.FileSystemWatcher | null = null;\n    private parentById: Map<string, string | undefined> = new Map();\n    private childrenById: Map<string, string[]> = new Map();\n    private roots: string[] = [];\n\n    private favicons: FaviconCache;\n\n    private running: Set<string> = new Set();\n    private scriptIds: Set<string> = new Set();\n\n    constructor(context: vscode.ExtensionContext) {\n        this.favicons = new FaviconCache(context);\n        const ws = vscode.workspace.workspaceFolders?.[0];\n        if (ws) {\n            this.treeFileUri = vscode.Uri.joinPath(ws.uri, '.vscode', 'project_explorer', 'tree_items.json');\n            const pattern = new vscode.RelativePattern(ws, '.vscode/project_explorer/tree_items.json');\n            this.watcher = vscode.workspace.createFileSystemWatcher(pattern);\n            this.watcher.onDidChange(() => this.refresh());\n            this.watcher.onDidCreate(() => this.refresh());\n        }\n\n        vscode.workspace.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('project-explorer.treeItems') || e.affectsConfiguration('project-explorer')) {\n                this.refresh();\n            }\n        });\n    }\n\n    refresh(): void {\n        this.rebuild();\n        this._onDidChangeTreeData.fire();\n    }\n\n    retheme(): void {\n        const base = path.join(__dirname, '..', 'resources', 'icons');\n        for (const [id, node] of this.items) {\n            // Update all projectExplorer themed icons to ensure they reflect the new theme\n            const iconPath = node.iconPath;\n            if (iconPath && typeof iconPath === 'object' && 'light' in iconPath && 'dark' in iconPath) {\n                // Check if this is a projectExplorer icon by looking at the file paths\n                const lightPath = String(iconPath.light);\n                const darkPath = String(iconPath.dark);\n                if (lightPath.includes('resources/icons') && darkPath.includes('resources/icons')) {\n                    // This is a projectExplorer themed icon - refresh it to ensure proper theme updating\n                    // Extract the icon ID from the path\n                    const lightMatch = lightPath.match(/([^/\\\\]+)\\.light_mode\\.(png|svg)$/);\n                    if (lightMatch) {\n                        const iconId = lightMatch[1];\n                        const themed = this.resolveProjectExplorerIcon(iconId);\n                        if (themed) {\n                            node.iconPath = themed as any;\n                        }\n                    }\n                }\n            }\n        }\n        this._onDidChangeTreeData.fire();\n    }\n\n    getTreeItem(element: ProjectExplorerItem): vscode.TreeItem {\n        return element;\n    }\n\n    async getChildren(element?: ProjectExplorerItem): Promise<ProjectExplorerItem[]> {\n        if (this.items.size === 0 && this.roots.length === 0) this.rebuild();\n        if (!element) return this.roots.map(id => this.items.get(id)!).filter(Boolean);\n        const ids = this.childrenById.get(element.id || '') || [];\n        return ids.map(id => this.items.get(id)!).filter(Boolean);\n    }\n\n    private rebuild() {\n        const warnings = new Set<string>();\n\n        this.items.clear();\n        this.parentById.clear();\n        this.childrenById.clear();\n        this.roots = [];\n        this.scriptIds.clear();\n\n        const arr = this.readTreeItemsFromFile();\n\n        type UserItem = {\n            id?: unknown;\n            typeAndPath?: unknown; // new name\n            type_plus_path?: unknown; // deprecated, supported for backward compatibility\n            icon?: unknown;\n            label?: unknown;\n            parentId?: unknown;\n            cwd?: unknown;\n            env?: unknown;\n            additionalContextMenuItems?: unknown;\n        };\n\n        type ValidItem = { id: string; type?: 'file' | 'folder' | 'url' | 'script'; target?: string; icon?: string; label: string; parentId?: string | null; cwd?: string; env?: Record<string, string>; additionalContextMenuItems?: Record<string, string> };\n        const valid: Array<ValidItem> = [];\n\n        for (const entry of arr as any[]) {\n            if (!entry || typeof entry !== 'object') {\n                warnings.add('Ignored non-object entry in `project-explorer.treeItems`.');\n                continue;\n            }\n            const id = typeof entry.id === 'string' && entry.id.trim() ? entry.id.trim() : '';\n            const typeAndPath = typeof (entry as any).typeAndPath === 'string' ? (entry as any).typeAndPath : undefined;\n            if (!id) {\n                warnings.add('Ignored item with missing `id`.');\n                continue;\n            }\n            if (this.items.has(id) || valid.find(v => v.id === id)) {\n                warnings.add(`Duplicate id '${id}' found. Only the first occurrence will be used.`);\n                continue;\n            }\n\n            const parentId = typeof entry.parentId === 'string' && entry.parentId.trim() ? entry.parentId.trim() : undefined;\n            const labelRaw = typeof entry.label === 'string' && entry.label.trim() ? entry.label.trim() : undefined;\n            const icon = typeof entry.icon === 'string' && entry.icon.trim() ? entry.icon.trim() : undefined;\n\n            let type: 'file' | 'folder' | 'url' | 'script' | undefined;\n            let target: string | undefined;\n\n            const newRaw = typeAndPath;\n            const oldRaw = (entry as any).type_plus_path;\n            const tpp = typeof newRaw === 'string' && newRaw.trim() ? newRaw.trim() : (typeof oldRaw === 'string' && oldRaw.trim() ? oldRaw.trim() : '');\n            if (!tpp && typeof oldRaw === 'string' && oldRaw.trim()) {\n                warnings.add(`Item '${id}' uses deprecated 'type_plus_path'. Please rename to 'typeAndPath'.`);\n            }\n            if (tpp) {\n                const colon = tpp.indexOf(':');\n                if (colon > 0 && colon < tpp.length - 1) {\n                    const t = tpp.slice(0, colon) as 'file' | 'folder' | 'url' | 'script';\n                    const tgt = tpp.slice(colon + 1);\n                    if (['file', 'folder', 'url', 'script'].includes(t)) {\n                        type = t;\n                        target = tgt;\n                    } else {\n                        warnings.add(`Item '${id}' has unknown type '${t}'. Treating as label-only item.`);\n                    }\n                } else {\n                    warnings.add(`Item '${id}' has invalid typeAndPath '${tpp}'. Treating as label-only item.`);\n                }\n            }\n\n            // Determine label fallback behavior\n            let label = labelRaw;\n            if (!label) {\n                if (type && target) {\n                    if (type === 'url') {\n                        try {\n                            const u = new URL(target);\n                            const segs = u.pathname.split('/').filter(Boolean);\n                            label = segs.length > 0 ? decodeURIComponent(segs[segs.length - 1]) : u.hostname;\n                        } catch {\n                            label = target;\n                        }\n                    } else if (type === 'file' || type === 'folder') {\n                        label = path.basename(this.resolveFsPath(target));\n                    } else if (type === 'script') {\n                        label = target;\n                    }\n                } else {\n                    // No type/target and no label provided; fall back to id\n                    label = id;\n                }\n            }\n\n            const v: ValidItem = { id, type, target, label: label!, icon, parentId: parentId ?? undefined };\n            if (type === 'script') {\n                const cwd = typeof (entry as any).cwd === 'string' && (entry as any).cwd.trim() ? (entry as any).cwd.trim() : undefined;\n                const envRaw = (entry as any).env;\n                let env: Record<string, string> | undefined;\n                if (envRaw && typeof envRaw === 'object' && !Array.isArray(envRaw)) {\n                    env = {};\n                    for (const [k, val] of Object.entries(envRaw as Record<string, unknown>)) {\n                        if (typeof val === 'string') env[k] = val;\n                    }\n                }\n                v.cwd = cwd;\n                v.env = env;\n                this.scriptIds.add(id);\n            }\n\n            // Parse additionalContextMenuItems for any item type\n            const additionalMenuRaw = (entry as any).additionalContextMenuItems;\n            if (additionalMenuRaw && typeof additionalMenuRaw === 'object' && !Array.isArray(additionalMenuRaw)) {\n                const additionalContextMenuItems: Record<string, string> = {};\n                for (const [menuLabel, command] of Object.entries(additionalMenuRaw as Record<string, unknown>)) {\n                    if (typeof command === 'string' && command.trim()) {\n                        additionalContextMenuItems[menuLabel] = command.trim();\n                    }\n                }\n                if (Object.keys(additionalContextMenuItems).length > 0) {\n                    v.additionalContextMenuItems = additionalContextMenuItems;\n                }\n            }\n\n            valid.push(v);\n        }\n\n        // Build nodes\n        for (const v of valid) {\n            const node = this.makeNode(v);\n            this.items.set(v.id, node);\n            this.parentById.set(v.id, v.parentId || undefined);\n        }\n\n        // Enforce: children cannot have script parent\n        for (const [id, pid] of Array.from(this.parentById.entries())) {\n            if (pid && this.scriptIds.has(pid)) {\n                warnings.add(`Item '${id}' cannot have script parent '${pid}'. Rendering as top-level.`);\n                this.parentById.set(id, undefined);\n            }\n        }\n\n        // Detect cycles\n        const visited = new Set<string>();\n        const stack = new Set<string>();\n        const cyc = new Set<string>();\n        const dfs = (id: string) => {\n            if (stack.has(id)) {\n                cyc.add(id);\n                return;\n            }\n            if (visited.has(id)) return;\n            visited.add(id);\n            stack.add(id);\n            const p = this.parentById.get(id);\n            if (p && this.items.has(p)) dfs(p);\n            stack.delete(id);\n        };\n        for (const id of this.items.keys()) dfs(id);\n        if (cyc.size > 0) warnings.add('Detected cyclical parent relationships. Items in cycles will be rendered at top level.');\n        for (const id of cyc) this.parentById.delete(id);\n\n        // Build children and roots\n        for (const id of this.items.keys()) this.childrenById.set(id, []);\n        for (const [id, pid] of this.parentById) {\n            if (pid && this.items.has(pid)) this.childrenById.get(pid)!.push(id);\n        }\n        // Any with no valid parent are roots\n        for (const id of this.items.keys()) {\n            const pid = this.parentById.get(id);\n            if (!pid || !this.items.has(pid)) {\n                if (pid && !this.items.has(pid)) warnings.add(`Parent '${pid}' not found for item '${id}'. Rendering as top-level.`);\n                this.roots.push(id);\n            }\n        }\n\n        // Set collapsible state based on children\n        for (const [id, node] of this.items) {\n            const hasChildren = (this.childrenById.get(id) || []).length > 0;\n            node.collapsibleState = hasChildren ? vscode.TreeItemCollapsibleState.Collapsed : vscode.TreeItemCollapsibleState.None;\n        }\n\n        // Surface warnings (non-blocking)\n        if (warnings.size > 0) {\n            vscode.window.showWarningMessage(Array.from(warnings).join(' '));\n        }\n    }\n\n    private makeNode(v: { id: string; type?: 'file' | 'folder' | 'url' | 'script'; target?: string; icon?: string; label: string; parentId?: string | null; cwd?: string; env?: Record<string, string>; additionalContextMenuItems?: Record<string, string>; }): ProjectExplorerItem {\n        const { id } = v;\n        const type = v.type;\n        const target = v.target;\n        let label = v.label;\n        let iconPath: vscode.ThemeIcon | vscode.Uri | undefined;\n        const tooltip = new vscode.MarkdownString();\n        if (type && target) tooltip.appendText(`${type}:${target}`); else tooltip.appendText(label);\n        tooltip.isTrusted = true;\n\n        // icon resolution (preliminary; Markdown overrides to themed pair below)\n        if (v.icon) {\n            const codicon = this.parseCodicon(v.icon);\n            if (codicon) {\n                iconPath = new vscode.ThemeIcon(codicon);\n            } else if (v.icon.startsWith('projectExplorer:')) {\n                const iconId = v.icon.substring('projectExplorer:'.length);\n                const themed = this.resolveProjectExplorerIcon(iconId);\n                if (themed) iconPath = themed as any;\n                else vscode.window.showWarningMessage(`Project Explorer icon not found: ${iconId}. Falling back to default icon.`);\n            } else if (v.icon.startsWith('local:')) {\n                const localPath = v.icon.substring('local:'.length);\n                const p = this.resolveFsPath(localPath);\n                if (fs.existsSync(p)) iconPath = vscode.Uri.file(p);\n                else vscode.window.showWarningMessage(`Local icon not found for item '${id}': ${localPath}. Falling back to default icon.`);\n            } else if (v.icon.startsWith('vscode:')) {\n                const vscodeIcon = v.icon.substring('vscode:'.length);\n                iconPath = new vscode.ThemeIcon(vscodeIcon);\n            } else if (v.icon.startsWith('remote:')) {\n                const remoteUrl = v.icon.substring('remote:'.length);\n                // For remote SVGs, we'll try to fetch them asynchronously\n                this.fetchRemoteIcon(remoteUrl, id).catch(() => {\n                    // Ignore errors, will fall back to default icon\n                });\n            } else {\n                // Legacy behavior - treat as file path\n                const p = this.resolveFsPath(v.icon);\n                if (fs.existsSync(p)) iconPath = vscode.Uri.file(p);\n                else vscode.window.showWarningMessage(`Icon path not found for item '${id}': ${v.icon}. Falling back to default icon.`);\n            }\n        } else if (type === 'url') {\n            iconPath = new vscode.ThemeIcon('globe');\n        } else if (type === 'script') {\n            iconPath = new vscode.ThemeIcon('run');\n        }\n\n        const node = new ProjectExplorerItem(label, vscode.TreeItemCollapsibleState.None) as ProjectExplorerItem & { script?: { cmd: string; cwd?: string; env?: Record<string, string> } };\n        node.id = id;\n        node.tooltip = tooltip;\n        node.iconPath = iconPath;\n        \n        // command behavior\n        if (type === 'file' && target) {\n            const fsPath = this.resolveFsPath(target);\n            const uri = vscode.Uri.file(fsPath);\n            const isMd = fsPath.toLowerCase().endsWith('.md');\n\n            // Set contextValue for context menus based on file type\n            node.contextValue = isMd ? 'projectExplorer.doc' : 'projectExplorer.file';\n            \n            // Set default file icon if no custom icon was specified\n            if (!iconPath) {\n                node.iconPath = uri;\n            }\n            \n            if (isMd) {\n                // Only override icon for markdown files if they have a projectExplorer icon set\n                // This allows resource markdown files to use VSCode's default markdown icon\n                if (v.icon && v.icon.startsWith('projectExplorer:')) {\n                    // Icon was already set above in the icon resolution section\n                } else if (v.icon) {\n                    // User provided a custom icon, try to resolve themed pair\n                    const useCodicon = this.parseCodicon(v.icon);\n                    if (!useCodicon) {\n                        const themed = this.resolveThemedPair(v.icon);\n                        if (themed) node.iconPath = themed as any;\n                    }\n                }\n                // If no custom icon is set, let VSCode use its default markdown icon\n            }\n            if (isMd) {\n                const cfg = vscode.workspace.getConfiguration('project-explorer');\n                const openInPreview = cfg.get<boolean>('openDocsInPreview', true);\n                if (openInPreview) node.command = { command: 'markdown.showPreview', title: 'Open Preview', arguments: [uri] } as any;\n                else node.command = { command: 'vscode.open', title: 'Open File', arguments: [uri] };\n            } else {\n                node.command = { command: 'vscode.open', title: 'Open File', arguments: [uri] };\n            }\n\n        } else if (type === 'folder' && target) {\n            const uri = vscode.Uri.file(this.resolveFsPath(target));\n            node.command = { command: 'revealInExplorer', title: 'Reveal in Explorer', arguments: [uri] } as any;\n            // Set default folder icon if no custom icon was specified\n            if (!iconPath) {\n                node.iconPath = new vscode.ThemeIcon('folder');\n            }\n            // Set contextValue for folders\n            node.contextValue = 'projectExplorer.folder';\n        } else if (type === 'url' && target) {\n            node.command = { command: 'projectExplorer.openExternal', title: 'Open in Browser', arguments: [target] };\n            // Set contextValue for URLs\n            node.contextValue = 'projectExplorer.url';\n            // Attempt async favicon resolution when user hasn't set a custom icon\n            if (!v.icon) {\n                this.favicons.getIconForUrl(target).then(uri => {\n                    if (uri) {\n                        const n = this.items.get(id);\n                        if (n) {\n                            n.iconPath = uri;\n                            this._onDidChangeTreeData.fire(n);\n                        }\n                    }\n                }).catch(() => {/*ignore*/});\n            }\n        } else if (type === 'script' && target) {\n            node.script = { cmd: target, cwd: v.cwd, env: v.env };\n            node.command = { command: 'projectExplorer.runScript', title: 'Run Script', arguments: [id] };\n            // Set contextValue for scripts\n            node.contextValue = 'projectExplorer.script';\n        }\n\n        // Set default folder icon for label-only items (grouping containers) if no custom icon was specified\n        if (!type && !iconPath) {\n            node.iconPath = new vscode.ThemeIcon('folder');\n        }\n\n        // Store additional context menu items on the node for later retrieval\n        if (v.additionalContextMenuItems) {\n            (node as any).additionalContextMenuItems = v.additionalContextMenuItems;\n        }\n\n        return node;\n    }\n\n    async runScriptById(id: string): Promise<void> {\n        const node = this.items.get(id) as (ProjectExplorerItem & { script?: { cmd: string; cwd?: string; env?: Record<string, string> } }) | undefined;\n        if (!node || !node.script) return;\n        if (this.running.has(id)) return; // already running\n\n        const originalLabel = node.label as string;\n        this.running.add(id);\n        node.command = undefined; // disable while running\n        node.label = `${originalLabel}...`;\n        this._onDidChangeTreeData.fire(node);\n\n        const cwd = node.script.cwd ? this.resolveFsPath(node.script.cwd) : undefined;\n        if (cwd && !fs.existsSync(cwd)) {\n            vscode.window.showErrorMessage(`Invalid cwd for script '${id}': ${cwd}`);\n            // restore state\n            this.running.delete(id);\n            node.label = originalLabel;\n            node.command = { command: 'projectExplorer.runScript', title: 'Run Script', arguments: [id] };\n            this._onDidChangeTreeData.fire(node);\n            return;\n        }\n\n        const env = { ...process.env, ...(node.script.env || {}) } as NodeJS.ProcessEnv;\n        const child = spawn(node.script.cmd, { shell: true, cwd, env });\n\n        let stdout = '';\n        let stderr = '';\n        child.stdout?.on('data', d => { stdout += d instanceof Buffer ? d.toString('utf8') : String(d); });\n        child.stderr?.on('data', d => { stderr += d instanceof Buffer ? d.toString('utf8') : String(d); });\n\n        let notified = false;\n        const finish = (ok: boolean, message?: string) => {\n            if (!notified) {\n                notified = true;\n                if (ok) {\n                    const out = (message ?? stdout).trim();\n                    vscode.window.showInformationMessage(out.length > 0 ? out : `Script '${id}' completed successfully.`);\n                } else {\n                    const err = (message ?? stderr).trim();\n                    vscode.window.showErrorMessage(err.length > 0 ? err : `Script '${id}' failed.`);\n                }\n            }\n            this.running.delete(id);\n            node.label = originalLabel;\n            node.command = { command: 'projectExplorer.runScript', title: 'Run Script', arguments: [id] };\n            this._onDidChangeTreeData.fire(node);\n        };\n\n        child.on('error', err => {\n            finish(false, `Failed to start script '${id}': ${err instanceof Error ? err.message : String(err)}`);\n        });\n        child.on('close', (code: number | null) => {\n            finish(code === 0);\n        });\n    }\n\n    private readTreeItemsFromFile(): any[] {\n        try {\n            if (this.treeFileUri) {\n                const p = this.treeFileUri.fsPath;\n                if (fs.existsSync(p)) {\n                    const txt = fs.readFileSync(p, 'utf8');\n                    const arr = JSON.parse(txt);\n                    return Array.isArray(arr) ? arr : [];\n                }\n            }\n        } catch {}\n        return [];\n    }\n\n    private parseCodicon(s: string): string | null {\n        const m = /^\\$\\(([^)]+)\\)$/.exec(s.trim());\n        return m ? m[1] : null;\n    }\n\n    private resolveThemedPair(input?: string): { light: vscode.Uri; dark: vscode.Uri } | null {\n        // If user gave an image path, try to infer .light_mode/.dark_mode siblings; else null\n        if (!input) return null;\n        const p = this.resolveFsPath(input);\n        const baseDir = path.dirname(p);\n        const file = path.basename(p);\n        const m = /(.*?)(\\.(light_mode|dark_mode))?(\\.[a-zA-Z0-9]+)$/.exec(file);\n        if (!m) return null;\n        const stem = m[1];\n        const ext = m[4];\n        const light = path.join(baseDir, `${stem}.light_mode${ext}`);\n        const dark = path.join(baseDir, `${stem}.dark_mode${ext}`);\n        if (fs.existsSync(light) && fs.existsSync(dark)) {\n            return { light: vscode.Uri.file(light), dark: vscode.Uri.file(dark) };\n        }\n        return null;\n    }\n\n    private resolveProjectExplorerIcon(iconId: string): { light: vscode.Uri; dark: vscode.Uri } | null {\n        const base = path.join(__dirname, '..', 'resources', 'icons');\n        const light = path.join(base, `${iconId}.light_mode.png`);\n        const dark = path.join(base, `${iconId}.dark_mode.png`);\n        if (fs.existsSync(light) && fs.existsSync(dark)) {\n            return { light: vscode.Uri.file(light), dark: vscode.Uri.file(dark) };\n        }\n        return null;\n    }\n\n    private async fetchRemoteIcon(url: string, itemId: string): Promise<void> {\n        try {\n            // Use the existing favicon fetching infrastructure but for any remote icon\n            const uri = await this.favicons.getIconForUrl(url);\n            if (uri) {\n                const node = this.items.get(itemId);\n                if (node) {\n                    node.iconPath = uri;\n                    this._onDidChangeTreeData.fire(node);\n                }\n            }\n        } catch (error) {\n            // Silently ignore errors for remote icon fetching\n        }\n    }\n\n    private resolveFsPath(p: string): string {\n        let s = p.trim();\n        if (s.startsWith('~') && process.env.HOME) s = s.replace('~', process.env.HOME);\n        if (path.isAbsolute(s)) return s;\n        const ws = vscode.workspace.workspaceFolders?.[0];\n        if (ws) return path.join(ws.uri.fsPath, s);\n        return s; // fall back\n    }\n}\n\nexport class ProjectExplorerItem extends vscode.TreeItem {\n    constructor(label: string, collapsibleState: vscode.TreeItemCollapsibleState) {\n        super(label, collapsibleState);\n    }\n}\n", "import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst ensureDir = (p: string) => { try { fs.mkdirSync(p, { recursive: true }); } catch {} };\nconst writeJsonAtomic = (file: string, obj: unknown) => {\n  const tmp = `${file}.tmp`;\n  fs.writeFileSync(tmp, JSON.stringify(obj, null, 2), 'utf8');\n  fs.renameSync(tmp, file);\n};\n\nexport type ParserSections = {\n  userDefined?: any[];\n  docs?: Record<string, DocNode>;\n};\n\nexport type DocNode = { path: string; type: 'doc' | 'folder' | 'resource'; title: string; children: DocNode[] };\n\nexport function activateParser(ctx: vscode.ExtensionContext): { dispose(): void } {\n  const ws = vscode.workspace.workspaceFolders?.[0];\n  const outDir = path.join(ws?.uri.fsPath || '', '.vscode', 'project_explorer');\n  if (ws) ensureDir(outDir);\n  const outFile = ws ? path.join(outDir, 'parser_output.json') : '';\n\n  let timer: NodeJS.Timeout | undefined;\n  const debouncedRun = () => {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(run, 150);\n  };\n\n  const cfgListener = vscode.workspace.onDidChangeConfiguration(e => {\n    if (e.affectsConfiguration('project-explorer.watchThese') || e.affectsConfiguration('project-explorer.userDefinedTreeItems') || e.affectsConfiguration('project-explorer.treeItems')) debouncedRun();\n  });\n\n  const fsWatchers: vscode.FileSystemWatcher[] = [];\n\n  const watchPath = (relOrAbs: string) => {\n    if (!ws) return;\n    const abs = path.isAbsolute(relOrAbs) ? relOrAbs : path.join(ws.uri.fsPath, relOrAbs);\n    const pat = abs.replace(/\\\\/g, '/');\n    const glob = new vscode.RelativePattern(ws, path.relative(ws.uri.fsPath, pat) + '/**');\n    const w = vscode.workspace.createFileSystemWatcher(glob);\n    fsWatchers.push(w);\n    w.onDidChange(debouncedRun);\n    w.onDidCreate(debouncedRun);\n    w.onDidDelete(debouncedRun);\n  };\n\n  const readFirstH1 = (file: string): string => {\n    try {\n      const txt = fs.readFileSync(file, 'utf8');\n      const m = /^#\\s+(.+)$/m.exec(txt);\n      return m ? m[1].trim() : '';\n    } catch { return ''; }\n  };\n\n  const buildDocs = (p: string): DocNode => {\n    const stat = fs.existsSync(p) ? fs.statSync(p) : undefined;\n    if (!stat) return { path: rel(p), type: 'resource', title: '', children: [] };\n    if (stat.isDirectory()) {\n      const children: DocNode[] = [];\n      for (const name of fs.readdirSync(p)) {\n        // Skip common hidden/system folders and files\n        if (name.startsWith('.') || \n            name === 'node_modules' || \n            name === '__pycache__' || \n            name === '.DS_Store' ||\n            name === 'Thumbs.db' ||\n            name === 'desktop.ini' ||\n            name.endsWith('.tmp') ||\n            name.endsWith('.temp')) continue;\n        const child = path.join(p, name);\n        children.push(buildDocs(child));\n      }\n      return { path: rel(p), type: 'folder', title: '', children };\n    }\n    if (p.toLowerCase().endsWith('.md')) {\n      return { path: rel(p), type: 'doc', title: readFirstH1(p), children: [] };\n    }\n    return { path: rel(p), type: 'resource', title: '', children: [] };\n  };\n\n  const rel = (abs: string) => ws ? path.relative(ws.uri.fsPath, abs) : abs;\n\n  const run = () => {\n    const cfg = vscode.workspace.getConfiguration('project-explorer');\n    const watch = cfg.get<any[]>('watchThese') || [];\n    const userDefined = (cfg.get<any[]>('userDefinedTreeItems') || cfg.get<any[]>('treeItems') || []).filter(Boolean);\n\n    const out: ParserSections = {};\n    if (userDefined.length > 0) out.userDefined = userDefined;\n\n    if (ws) {\n      // reset watchers\n      while (fsWatchers.length) fsWatchers.pop()?.dispose();\n      const docsSection: Record<string, DocNode> = {};\n      for (const entry of watch) {\n        if (!entry || typeof entry !== 'object') continue;\n        if (entry.type === 'docs' && typeof entry.path === 'string' && entry.path.trim()) {\n          const abs = path.isAbsolute(entry.path) ? entry.path : path.join(ws.uri.fsPath, entry.path);\n          watchPath(entry.path);\n          docsSection[entry.path] = buildDocs(abs);\n        }\n      }\n      if (Object.keys(docsSection).length > 0) out.docs = docsSection;\n      ensureDir(outDir);\n      writeJsonAtomic(outFile, out);\n    }\n  };\n\n  if (ws) run();\n\n  ctx.subscriptions.push(cfgListener);\n  return { dispose() { while (fsWatchers.length) fsWatchers.pop()?.dispose(); if (timer) clearTimeout(timer); } };\n}\n", "import * as vscode from \"vscode\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { DocNode, ParserSections } from \"./parser\";\nimport { toTitleCase } from \"./utils/nameCasing\";\n\nconst ensureDir = (p: string) => {\n  try {\n    fs.mkdirSync(p, { recursive: true });\n  } catch {}\n};\nconst writeJsonAtomic = (file: string, obj: unknown) => {\n  const tmp = `${file}.tmp`;\n  fs.writeFileSync(tmp, JSON.stringify(obj, null, 2), \"utf8\");\n  fs.renameSync(tmp, file);\n};\n\nexport function activateBuilder(ctx: vscode.ExtensionContext): {\n  dispose(): void;\n} {\n  const ws = vscode.workspace.workspaceFolders?.[0];\n  if (!ws) return { dispose() {} };\n  const root = ws.uri.fsPath;\n  const outDir = path.join(root, \".vscode\", \"project_explorer\");\n  const parserFile = path.join(outDir, \"parser_output.json\");\n  const treeFile = path.join(outDir, \"tree_items.json\");\n  ensureDir(outDir);\n\n  const pattern = new vscode.RelativePattern(\n    ws,\n    \".vscode/project_explorer/parser_output.json\",\n  );\n  const w = vscode.workspace.createFileSystemWatcher(pattern);\n\n  const build = () => {\n    let parsed: ParserSections | undefined;\n    try {\n      const txt = fs.readFileSync(parserFile, \"utf8\");\n      parsed = JSON.parse(txt);\n    } catch {\n      return;\n    }\n    if (!parsed) return;\n\n    const items: any[] = [];\n    const seen = new Set<string>();\n\n    // userDefined pass-through\n    if (Array.isArray(parsed.userDefined)) {\n      for (const it of parsed.userDefined) {\n        if (!it || typeof it !== \"object\") continue;\n        if (typeof it.id !== \"string\" || !it.id) continue;\n        if (seen.has(it.id)) continue;\n        seen.add(it.id);\n        items.push({\n          id: it.id,\n          typeAndPath: it.typeAndPath,\n          icon: it.icon,\n          label: it.label,\n          parentId: it.parentId,\n          cwd: it.cwd,\n          env: it.env,\n        });\n      }\n    }\n\n    // docs builder\n    const docs = parsed.docs || {};\n    const pushDocTree = (node: DocNode, parentId: string | null) => {\n      const basename = path.basename(node.path);\n      if (node.type === \"folder\") {\n        // find promotion document\n        const readme = node.children.find(\n          (c) => c.type === \"doc\" && /README\\.md$/i.test(c.path),\n        );\n        const baseDoc = node.children.find(\n          (c) =>\n            c.type === \"doc\" &&\n            path.basename(c.path, \".md\").toLowerCase() ===\n              path.basename(node.path).toLowerCase(),\n        );\n        const promote = readme || baseDoc;\n        if (promote) {\n          const pid = idFromDoc(promote);\n          addDocItem(promote, parentId);\n          for (const child of node.children) {\n            if (child === promote) continue;\n            pushDocTree(child, pid);\n          }\n          return;\n        }\n        // regular folder item\n        const id = basename;\n        addItem({\n          id,\n          typeAndPath: `folder:${node.path}`,\n          icon: undefined,\n          label: toTitleCase(basename),\n          parentId,\n        });\n        for (const child of node.children) pushDocTree(child, id);\n        return;\n      }\n      if (node.type === \"doc\") {\n        addDocItem(node, parentId);\n        return;\n      }\n      // resource\n      const id = basename;\n      addItem({\n        id,\n        typeAndPath: `file:${node.path}`,\n        icon: undefined,\n        label: toTitleCase(basename.replace(/\\.[^.]+$/, \"\")),\n        parentId,\n      });\n    };\n\n    const addDocItem = (n: DocNode, parentId: string | null) => {\n      const id = idFromDoc(n);\n      const label =\n        n.title && n.title.trim()\n          ? n.title.trim()\n          : toTitleCase(path.basename(n.path, \".md\"));\n      addItem({\n        id,\n        typeAndPath: `file:${n.path}`,\n        icon: \"projectExplorer:doc\",\n        label,\n        parentId,\n        additionalContextMenuItems: {\n          \"Open in Preview\": \"markdown.showPreview\",\n          \"Open in Editor\": \"vscode.open\",\n        },\n      });\n    };\n\n    const idFromDoc = (n: DocNode) => path.basename(n.path, \".md\");\n\n    const addItem = (it: {\n      id: string;\n      typeAndPath: string;\n      icon?: string;\n      label: string;\n      parentId: string | null;\n      additionalContextMenuItems?: Record<string, string>;\n    }) => {\n      if (!it.id || seen.has(it.id)) return;\n      seen.add(it.id);\n      items.push({\n        id: it.id,\n        typeAndPath: it.typeAndPath,\n        icon: it.icon,\n        label: it.label,\n        parentId: it.parentId || undefined,\n        additionalContextMenuItems: it.additionalContextMenuItems,\n      });\n    };\n\n    for (const key of Object.keys(docs)) pushDocTree(docs[key], null);\n\n    writeJsonAtomic(treeFile, items);\n  };\n\n  w.onDidCreate(build, null, ctx.subscriptions);\n  w.onDidChange(build, null, ctx.subscriptions);\n  w.onDidDelete(() => {}, null, ctx.subscriptions);\n\n  if (fs.existsSync(parserFile)) build();\n\n  return {\n    dispose() {\n      w.dispose();\n    },\n  };\n}\n\n", "function tokenize(input: string): string[] {\n    if (!input) return [];\n    \n    // Remove leading and trailing separators (preserve Unicode letters)\n    let processed = input.replace(/^[^\\p{L}\\p{N}]+|[^\\p{L}\\p{N}]+$/gu, '');\n    \n    if (!processed) return [];\n    \n    // Split on camelCase boundaries: lowercase followed by uppercase\n    processed = processed.replace(/(\\p{Ll})(\\p{Lu})/gu, '$1 $2');\n    \n    // Split on boundaries between consecutive uppercase letters and lowercase\n    processed = processed.replace(/(\\p{Lu})(\\p{Lu}\\p{Ll})/gu, '$1 $2');\n    \n    // Split on letter-to-number and number-to-letter boundaries, but preserve \"3D\"\n    processed = processed.replace(/(\\p{N})(\\p{L})/gu, (match, digit, letter) => {\n        // Don't split \"3D\"\n        if (digit === '3' && letter === 'D') {\n            return match;\n        }\n        return digit + ' ' + letter;\n    });\n    processed = processed.replace(/(\\p{L})(\\p{N})/gu, '$1 $2');\n    \n    // Split on non-letter-non-number characters and filter empty tokens\n    const tokens = processed\n        .split(/[^\\p{L}\\p{N}]+/u)\n        .filter(token => token.length > 0);\n    \n    return tokens;\n}\n\nexport function toSnakeCase(input: string): string {\n    const tokens = tokenize(input);\n    return tokens\n        .map(token => {\n            // Normalize \"3D\" to \"3d\" for snake_case\n            if (token === '3D') return '3d';\n            return token.toLowerCase();\n        })\n        .join('_');\n}\n\nexport function toCamelCase(input: string): string {\n    const tokens = tokenize(input);\n    if (tokens.length === 0) return '';\n    \n    return tokens\n        .map((token, index) => {\n            // Normalize \"3D\" to \"3d\" for camelCase\n            if (token === '3D') token = '3d';\n            const lowerToken = token.toLowerCase();\n            if (index === 0) {\n                return lowerToken;\n            }\n            return lowerToken.charAt(0).toUpperCase() + lowerToken.slice(1);\n        })\n        .join('');\n}\n\nexport function toPascalCase(input: string): string {\n    const tokens = tokenize(input);\n    if (tokens.length === 0) return '';\n    \n    return tokens\n        .map(token => {\n            // Normalize \"3D\" to \"3d\" for PascalCase\n            if (token === '3D') token = '3d';\n            const lowerToken = token.toLowerCase();\n            if (/^\\d+$/.test(token)) {\n                return lowerToken; // Keep numbers lowercase\n            }\n            return lowerToken.charAt(0).toUpperCase() + lowerToken.slice(1);\n        })\n        .join('');\n}\n\nexport function toKebabCase(input: string): string {\n    const tokens = tokenize(input);\n    return tokens\n        .map(token => {\n            // Normalize \"3D\" to \"3d\" for kebab-case\n            if (token === '3D') return '3d';\n            return token.toLowerCase();\n        })\n        .join('-');\n}\n\nexport function toTitleCase(input: string): string {\n    if (!input) return '';\n    \n    const tokens = tokenize(input);\n    \n    // Post-process tokens to merge certain patterns for Title Case\n    const processedTokens: string[] = [];\n    for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        const nextToken = tokens[i + 1];\n        \n        // Handle single digit + letter combinations like \"3\" + \"d\" -> \"3D\"\n        if (nextToken && /^\\d+$/.test(token) && /^[a-zA-Z]$/.test(nextToken)) {\n            processedTokens.push(token + nextToken.toUpperCase());\n            i++; // Skip the next token since we merged it\n            continue;\n        }\n        \n        // Handle patterns like \"api\" + \"v\" + \"2\" -> \"API\" + \"V2\"\n        const nextNextToken = tokens[i + 2];\n        if (nextToken && nextNextToken && /^\\d+$/.test(nextNextToken)) {\n            const lowerToken = token.toLowerCase();\n            if (['api', 'html', 'xml', 'css', 'js', 'ts'].includes(lowerToken) && nextToken.toLowerCase() === 'v') {\n                processedTokens.push(token.toUpperCase());\n                processedTokens.push(nextToken.toUpperCase() + nextNextToken);\n                i += 2; // Skip the next two tokens since we processed them\n                continue;\n            }\n        }\n        \n        processedTokens.push(token);\n    }\n    \n    return processedTokens\n        .map(token => {\n            // Special handling for tokens with numbers and letters like \"3d\", \"HTML5\"\n            if (/^\\d+[a-zA-Z]+$/.test(token)) {\n                // For patterns like \"3d\" -> \"3D\", \"2d\" -> \"2D\"\n                return token.toUpperCase();\n            }\n            if (/^[a-zA-Z]+\\d+$/.test(token)) {\n                // For patterns like \"html5\" -> \"HTML5\", but only for known acronyms\n                const lowerToken = token.toLowerCase();\n                const letterPart = lowerToken.replace(/\\d+$/, '');\n                if (['html', 'xml', 'css', 'js', 'ts', 'api'].includes(letterPart)) {\n                    return token.toUpperCase();\n                }\n                // Otherwise just capitalize normally\n                return lowerToken.charAt(0).toUpperCase() + lowerToken.slice(1);\n            }\n            \n            // Special handling for common acronyms (only well-known ones that should stay uppercase)\n            const lowerToken = token.toLowerCase();\n            if (['html', 'xml', 'css', 'js', 'ts', 'http', 'url'].includes(lowerToken)) {\n                return token.toUpperCase();\n            }\n            \n            // Regular capitalization for other tokens\n            return lowerToken.charAt(0).toUpperCase() + lowerToken.slice(1);\n        })\n        .join(' ');\n}"],
  "mappings": "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",
  "names": ["settingsUtil_exports", "__export", "format", "get", "update", "watch", "vscode", "defaults", "scopeFor", "settingsUri", "init_settingsUtil", "__esmMin", "scope", "_a", "key", "_scope", "parts", "section", "cfg", "k", "value", "keys", "handler", "asArray", "rex", "all", "candidates", "cfgAll", "c", "sub", "e", "test", "fullKey", "ws", "home", "uri", "json", "exists", "buf", "txt", "allKeys", "ftlKeys", "nonFtl", "ordered", "content", "firstKey", "extension_exports", "__export", "activate", "deactivate", "__toCommonJS", "vscode", "vscode", "path", "fs", "https", "http", "import_child_process", "FaviconCache", "context", "urlStr", "origin", "u", "existing", "promise", "fullUrl", "now", "entry", "icoUrl", "icoBuf", "file", "html", "href", "base", "resolved", "buf", "ext", "txt", "safe", "lower", "timeoutMs", "resolve", "reject", "timedOut", "to", "req", "res", "status", "chunks", "d", "err", "re", "m", "candidates", "rel", "ProjectExplorerProvider", "_a", "ws", "pattern", "e", "id", "node", "iconPath", "lightPath", "darkPath", "lightMatch", "iconId", "themed", "element", "warnings", "arr", "valid", "typeAndPath", "v", "parentId", "labelRaw", "icon", "type", "target", "newRaw", "oldRaw", "tpp", "colon", "t", "tgt", "label", "segs", "cwd", "envRaw", "env", "k", "val", "additionalMenuRaw", "additionalContextMenuItems", "menuLabel", "command", "pid", "visited", "stack", "cyc", "dfs", "p", "hasChildren", "tooltip", "codicon", "localPath", "vscodeIcon", "remoteUrl", "ProjectExplorerItem", "fsPath", "uri", "isMd", "n", "_b", "originalLabel", "child", "stdout", "stderr", "notified", "finish", "ok", "message", "out", "code", "s", "input", "baseDir", "stem", "light", "dark", "url", "itemId", "collapsibleState", "vscode", "fs", "path", "ensureDir", "p", "writeJsonAtomic", "file", "obj", "tmp", "activateParser", "ctx", "_a", "ws", "outDir", "outFile", "timer", "debouncedRun", "run", "cfgListener", "e", "fsWatchers", "watchPath", "relOrAbs", "pat", "glob", "w", "readFirstH1", "txt", "m", "buildDocs", "stat", "rel", "children", "name", "child", "abs", "cfg", "watch", "userDefined", "out", "docsSection", "entry", "vscode", "fs", "path", "tokenize", "input", "processed", "match", "digit", "letter", "token", "toTitleCase", "input", "tokens", "tokenize", "processedTokens", "i", "token", "nextToken", "nextNextToken", "lowerToken", "letterPart", "ensureDir", "p", "writeJsonAtomic", "file", "obj", "tmp", "activateBuilder", "ctx", "_a", "ws", "root", "outDir", "parserFile", "treeFile", "pattern", "w", "build", "parsed", "txt", "items", "seen", "it", "docs", "pushDocTree", "node", "parentId", "basename", "readme", "c", "baseDoc", "promote", "pid", "idFromDoc", "addDocItem", "child", "id", "addItem", "toTitleCase", "n", "label", "key", "activate", "context", "_a", "provider", "ProjectExplorerProvider", "ws", "dir", "parser", "activateParser", "builder", "activateBuilder", "themeSub", "updateBrainstormingContext", "raw", "has", "e", "pathSetting", "targetUri", "expanded", "doc", "err", "msg", "url", "uri", "id", "item", "error", "settings", "openedUri", "firstKey", "editor", "idx", "pos", "deactivate"]
}
